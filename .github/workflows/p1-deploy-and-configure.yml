name: '1. Deploy and configure'

on:
  # push:
  #   branches:
  #     - main
  workflow_dispatch:

jobs:

  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    env:
      TF_CLOUD_ORGANIZATION: ${{ vars.TF_CLOUD_ORGANIZATION }}
      TF_WORKSPACE: ${{ vars.TF_WORKSPACE }}
      TF_VAR_aws_region: ${{ vars.AWS_REGION }}
      TF_VAR_domain_name: ${{ vars.DOMAIN_NAME }}
      TF_VAR_email: ${{ vars.EMAIL }}
      TF_VAR_deployer_ssh_public_key: ${{ secrets.EC2_PUBLIC_KEY }}
      TF_VAR_cloudflare_api_token: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      TF_VAR_cloudflare_zone_id: ${{ secrets.CLOUDFLARE_ZONE_ID }}
    
    defaults:
      run:
        shell: bash

    steps:

    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: |
        terraform plan -out tfplan -input=false | tee plan.log
        echo "TF_PLAN_HAS_CHANGES=$(grep -q 'No changes' plan.log && echo false || echo true)" >> $GITHUB_ENV

    # Applies the changes required to reach the desired state of the configuration
    - name: Terraform Apply
      if: env.TF_PLAN_HAS_CHANGES == 'true'
      run: terraform apply tfplan


  ansible:
    name: 'Ansible'
    runs-on: ubuntu-latest
    environment: production
    needs: terraform

    defaults:
      run:
        shell: bash

    steps:

    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Add SSH key to the GitHub Actions runner
    - name: Add SSH key
      run: |
        mkdir -p /home/runner/.ssh
        echo "${{ secrets.EC2_PRIVATE_KEY }}" > /home/runner/.ssh/ec2_id_rsa
        chmod 600 /home/runner/.ssh/ec2_id_rsa

    # Install Ansible
    - name: Install Ansible
      run: |
        sudo apt-get update
        sudo apt-get install -y ansible

    # Install botocore and boto3 into Ansible pipx venv
    - name: Install boto3 and botocore into Ansible pipx venv
      run: |
        pipx inject ansible-core boto3 botocore

    # # Check Ansible version
    # - name: Check Ansible version
    #   run: ansible --version

    # Configure AWS credentials
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION }}
    
    # # List all EC2 hosts from dynamic inventory
    # - name: List EC2 hosts
    #   run: |
    #     ansible-inventory -i ansible-inventory.aws_ec2.yml --list

    # Ping all EC2 instances to check connectivity
    - name: Ping EC2 instances
      run: |
        ansible all -i ansible-inventory.aws_ec2.yml -m ping

    # Run the Ansible playbook to install Docker
    - name: Run Playbook "docker install"
      run: |
        ansible-playbook -i ansible-inventory.aws_ec2.yml ansible-docker-install.yml \
          --extra-vars "domain_name=${{ vars.DOMAIN_NAME }} email=${{ vars.EMAIL }}"

    # Run the Ansible playbook to deploy and configure Docker Compose applications
    - name: Run Playbook "docker up"
      run: |
        ansible-playbook -i ansible-inventory.aws_ec2.yml ansible-docker-up.yml \
          --extra-vars "domain_name=${{ vars.DOMAIN_NAME }} email=${{ vars.EMAIL }}"